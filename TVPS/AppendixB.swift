//
//  AppendixB.swift
//  TVPS
//
//  Created by Gabriel Tejeda on 14/04/17.
//  Copyright Â© 2017 SOFTAM03. All rights reserved.
//

import UIKit
import FirebaseDatabase

class AppendixB {
    
    static let age5_5 = [
        [4,3,5,4,6,4,6],//1
        [6,5,7,6,7,7,7],//2
        [7,7,8,7,9,8,9],//3
        [8,8,9,9,10,10,10],//4
        [10,10,10,10,11,11,11],//5
        [11,11,11,12,12,12,12],//6
        [12,12,12,13,13,14,14],//7
        [13,13,13,14,14,16,15],//8
        [15,15,14,16,15,17,16],//9
        [16,16,15,17,17,19,17],//10
        [18,17,16,18,18,19,18],//11
        [19,18,17,19,19,19,19],//12
        [19,19,19,19,19,19,19],//13
        [19,19,19,19,19,19,19],//14
        [19,19,19,19,19,19,19],//15
        [19,19,19,19,19,19,19]//16
    ]
    
    static let age5_11 = [
        [3,2,4,3,5,3,5],//1
        [5,4,6,5,6,6,7],//2
        [7,6,7,6,8,7,8],//3
        [8,7,8,8,9,9,9],//4
        [9,8,9,10,10,10,10],//5
        [10,10,10,11,11,11,11],//6
        [11,11,11,12,12,13,13],//7
        [12,12,12,14,13,14,14],//8
        [14,13,13,15,14,16,15],//9
        [15,15,14,16,16,18,16],//10
        [17,16,15,18,17,19,18],//11
        [19,18,17,19,18,19,19],//12
        [19,19,19,19,19,19,19],//13
        [19,19,19,19,19,19,19],//14
        [19,19,19,19,19,19,19],//15
        [19,19,19,19,19,19,19]//16
    ]
    
    static let age6_5 = [
        [3,2,3,2,4,3,4],//1
        [4,3,5,4,5,5,6],//2
        [6,5,6,6,7,6,8],//3
        [7,6,7,8,8,8,9],//4
        
        [8,7,8,9,9,9,10],//5
        [10,9,9,10,10,11,11],//6
        [11,10,10,11,11,12,12],//7
        [12,11,11,13,12,13,13],//8
        
        [13,12,12,14,13,15,14],//9
        [14,14,13,16,14,17,16],//10
        [16,15,14,17,16,18,17],//11
        [18,17,16,18,17,19,18],//12
        
        [19,18,18,19,18,19,19],//13
        [19,19,19,19,19,19,19],//14
        [19,19,19,19,19,19,19],//15
        [19,19,19,19,19,19,19]//16
    ]
    
    static let age6_11 = [
        [2,1,2,2,3,2,3],//1
        [4,2,4,4,4,4,5],//2
        [5,4,5,5,6,6,7],//3
        [7,5,7,7,7,7,8],//4
        
        [8,6,8,8,8,9,9],//5
        [9,8,9,9,9,10,10],//6
        [10,9,9,11,10,11,11],//7
        [11,10,10,12,11,12,13],//8
        
        [12,11,11,13,12,14,14],//9
        [14,13,12,15,13,15,15],//10
        [15,14,14,16,15,17,16],//11
        [17,16,15,18,16,19,18],//12
        
        [19,18,17,19,18,19,19],//13
        [19,19,18,19,19,19,19],//14
        [19,19,19,19,19,19,19],//15
        [19,19,19,19,19,19,19]//16
    ]
    
    static let age7_5 = [
        [2,1,1,1,2,2,3],//1
        [3,2,3,3,4,4,5],//2
        [5,3,5,5,5,5,7],//3
        [6,4,6,6,6,6,8],//4
        
        [7,6,7,7,7,8,9],//5
        [8,7,8,9,8,9,10],//6
        [9,8,9,10,9,10,11],//7
        [10,9,10,11,10,12,12],//8
        
        [12,10,11,13,11,13,13],//9
        [13,12,12,14,13,14,14],//10
        [14,13,13,15,14,16,16],//11
        [16,15,14,17,15,18,17],//12
        
        [18,17,16,18,17,19,19],//13
        [19,19,18,19,18,19,19],//14
        [19,19,19,19,19,19,19],//15
        [19,19,19,19,19,19,19]//16
    ]
    
    static let age7_11 = [
        [1,0,0,1,2,1,2],//1
        [3,1,3,2,3,3,5],//2
        [4,2,4,4,4,5,6],//3
        [6,4,5,5,5,6,7],//4
        
        [7,5,6,7,6,7,8],//5
        [8,6,7,8,8,8,9],//6
        [9,7,8,9,9,10,10],//7
        [10,8,9,10,10,11,11],//8
        
        [11,9,10,12,11,12,12],//9
        [12,11,11,13,12,13,14],//10
        [14,12,12,15,13,15,15],//11
        [15,14,13,16,14,17,16],//12
        
        [17,16,15,18,16,18,18],//13
        [18,18,17,19,18,19,19],//14
        [19,19,19,19,19,19,19],//15
        [19,19,19,19,19,19,19]//16
    ]
    
    static let age8_5 = [
        [1,0,0,1,1,1,2],//1
        [2,1,2,2,3,2,4],//2
        [4,2,4,4,4,4,6],//3
        [5,3,5,5,5,5,7],//4
        
        [6,4,6,6,6,6,8],//5
        [7,5,7,7,7,8,9],//6
        [8,7,7,9,8,9,10],//7
        [9,8,8,10,9,10,11],//8
        
        [10,9,9,11,10,11,12],//9
        [12,10,10,12,11,13,13],//10
        [13,11,11,14,12,14,14],//11
        [15,13,13,15,14,16,16],//12
        
        [16,15,14,17,15,18,17],//13
        [18,17,16,19,17,19,19],//14
        [19,19,18,19,19,19,19],//15
        [19,19,19,19,19,19,19]//16
    ]
    
    static let age8_11 = [
        [1,0,0,1,1,1,2],//1
        [2,0,2,2,2,2,4],//2
        [3,1,3,3,3,4,5],//3
        [5,2,4,4,4,5,6],//4
        
        [6,4,5,6,6,6,7],//5
        [7,5,6,7,7,7,8],//6
        [8,6,7,8,8,8,9],//7
        [9,7,8,9,9,9,10],//8
        
        [10,8,9,10,10,11,11],//9
        [11,9,9,12,11,12,12],//10
        [12,11,10,13,12,13,14],//11
        [14,12,12,15,13,15,15],//12
        
        [15,14,13,17,15,17,17],//13
        [18,16,15,18,17,19,19],//14
        [19,18,18,19,19,19,19],//15
        [19,19,19,19,19,19,19]//16
    ]
    
    static let age9_5 = [
        [0,0,0,0,1,0,1],//1
        [1,0,1,1,2,2,3],//2
        [3,1,3,3,3,3,5],//3
        [4,2,4,4,4,4,6],//4
        
        [5,3,5,5,5,5,7],//5
        [6,4,6,6,6,7,8],//6
        [7,5,6,8,7,8,9],//7
        [8,7,7,9,8,9,10],//8
        
        [9,8,8,10,9,10,11],//9
        [11,9,9,11,10,11,12],//10
        [12,10,10,13,11,13,13],//11
        [13,12,11,14,12,14,14],//12
        
        [15,14,12,16,14,16,16],//13
        [17,16,15,18,16,18,18],//14
        [19,18,17,19,18,19,19],//15
        [19,19,18,19,19,19,19]//16
    ]
    
    static let age9_11 = [
        [0,0,0,0,0,0,1],//1
        [1,0,1,1,1,1,3],//2
        [2,0,2,2,2,3,4],//3
        [4,1,3,4,4,4,5],//4
        
        [5,3,4,5,5,5,6],//5
        [6,4,5,6,6,6,7],//6
        [7,5,6,7,7,7,8],//7
        [8,6,7,8,8,8,9],//8
        
        [9,7,7,9,9,10,10],//9
        [10,8,8,10,10,11,11],//10
        [11,9,9,12,11,12,12],//11
        [13,11,10,14,12,13,14],//12
        
        [14,13,11,15,13,15,15],//13
        [16,15,14,17,16,17,17],//14
        [18,17,16,18,18,19,18],//15
        [19,18,18,19,19,19,19]//16
    ]
    
    static let age10_11 = [
        [0,0,0,0,0,0,1],//1
        [0,0,1,0,1,1,2],//2
        [1,0,2,1,2,2,4],//3
        [3,1,3,3,3,3,5],//4
        
        [4,2,4,4,4,4,6],//5
        [5,3,5,5,5,5,7],//6
        [6,4,5,6,6,6,8],//7
        [7,6,6,8,7,8,9],//8
        
        [8,7,7,9,8,9,9],//9
        [9,8,8,10,9,10,10],//10
        [10,9,9,11,10,11,11],//11
        [12,10,10,13,11,12,13],//12
        
        [13,12,11,14,13,14,14],//13
        [15,14,13,16,15,16,16],//14
        [18,16,15,18,17,18,18],//15
        [19,18,17,19,19,19,19]//16
    ]
    
    static let age11_11 = [
        [0,0,0,0,0,0,0],//1
        [0,0,0,0,0,0,1],//2
        [1,0,1,1,1,2,3],//3
        [2,0,2,2,3,3,4],//4
        
        [3,1,3,3,4,4,5],//5
        [4,3,4,5,5,5,6],//6
        [6,4,5,6,5,6,7],//7
        [6,5,6,7,7,7,8],//8
        
        [7,6,6,8,8,8,9],//9
        [8,7,7,9,8,9,9],//10
        [9,8,8,10,9,10,10],//11
        [11,10,9,12,11,11,12],//12
        
        [12,11,10,14,12,13,13],//13
        [14,13,12,16,14,15,15],//14
        [16,15,14,17,16,17,17],//15
        [18,17,16,18,18,19,19]//16
    ]
    
    static let age12_11 = [
        [0,0,0,0,0,0,0],//1
        [0,0,0,0,0,0,1],//2
        [0,0,0,0,1,1,2],//3
        [1,0,1,1,2,2,4],//4
        
        [3,1,2,3,3,3,5],//5
        [4,2,3,4,4,4,6],//6
        [5,3,4,5,5,5,7],//7
        [6,4,5,6,6,6,8],//8
        
        [7,5,6,8,7,7,8],//9
        [8,6,6,9,8,8,9],//10
        [9,8,7,10,9,10,10],//11
        [10,9,8,11,10,11,11],//12
        
        [12,10,10,13,11,12,12],//13
        [13,12,11,15,13,14,14],//14
        [15,14,13,16,15,17,16],//15
        [18,17,16,18,18,19,18]//16
    ]
    
    static let age13_11 = [
        [0,0,0,0,0,0,0],//1
        [0,0,0,0,0,0,1],//2
        [0,0,0,0,1,0,2],//3
        [1,0,0,1,2,2,3],//4
        
        [2,0,1,2,3,3,4],//5
        [3,1,2,3,4,4,5],//6
        [5,2,3,5,5,5,6],//7
        [5,3,4,6,6,6,7],//8
        
        [6,5,5,7,7,7,8],//9
        [7,6,6,8,7,8,8],//10
        [8,7,7,9,8,9,9],//11
        [10,8,8,10,10,10,10],//12
        
        [11,10,9,12,11,12,11],//13
        [12,12,10,14,13,13,13],//14
        [14,14,12,16,15,16,15],//15
        [17,16,15,18,18,19,17]//16
    ]
    
    static let age14_11 = [
        [0,0,0,0,0,0,0],//1
        [0,0,0,0,0,0,0],//2
        [0,0,0,0,0,0,1],//3
        [0,0,0,1,1,1,3],//4
        
        [1,0,0,2,2,2,4],//5
        [3,1,2,3,3,3,5],//6
        [4,2,3,4,4,4,6],//7
        [5,3,4,5,5,5,7],//8
        
        [6,4,5,7,6,6,7],//9
        [7,5,5,8,7,7,8],//10
        [8,7,6,9,8,8,9],//11
        [9,8,7,10,9,10,10],//12
        
        [10,9,8,11,11,11,11],//13
        [12,11,10,13,12,13,12],//14
        [14,13,12,15,14,15,15],//15
        [17,16,15,17,17,18,17]//16
    ]
    
    static let age15_11 = [
        [0,0,0,0,0,0,0],//1
        [0,0,0,0,0,0,0],//2
        [0,0,0,0,0,0,1],//3
        [0,0,0,0,1,1,2],//4
        
        [1,0,0,1,2,2,3],//5
        [2,0,1,2,3,3,4],//6
        [3,1,2,4,4,4,5],//7
        [4,2,3,5,5,5,6],//8
        
        [5,3,4,6,6,6,7],//9
        [6,5,5,7,7,7,7],//10
        [7,6,6,8,8,8,8],//11
        [9,7,7,10,9,9,9],//12
        
        [10,9,8,11,10,10,10],//13
        [11,10,9,12,12,12,12],//14
        [13,12,11,15,14,15,14],//15
        [16,15,14,17,17,18,16]//16
    ]
    
    class func getCronAge(birth: String, dateTest: String) -> Array<Int>{
        var birthArray = birth.components(separatedBy: "/").flatMap { Int($0.trimmingCharacters(in: .whitespaces)) }
        var testArray = dateTest.components(separatedBy: "/").flatMap { Int($0.trimmingCharacters(in: .whitespaces)) }
        var cronAge = [0,0,0]
        
        if (testArray[0] < birthArray[0]){
            testArray[0] += 30
            testArray[1] -= 1
        }
        
        cronAge[0] = testArray[0]-birthArray[0]
        
        if (testArray[1] < birthArray[1]){
            testArray[1] += 12
            testArray[2] -= 1
        }
        
        cronAge[1] = testArray[1]-birthArray[1]
        
        cronAge[2] = testArray[2]-birthArray[2]
        
        if(cronAge[0] > 15){
            cronAge[1] += 1
            if(cronAge[1]==12){
                cronAge[2] += 1
                cronAge[1] = 0
            }
        }
        
        return cronAge
    }
    
    class func rawToScaled(rawScore: Array<Int>, birth: String, dateOfTest: String) -> Array<Double>{
        var cronAge = self.getCronAge(birth: birth, dateTest: dateOfTest)
        
        var appTable = self.age5_5
        var scaledScore:Array<Double> = [0,0,0,0,0,0,0]
        
        if(cronAge[2]==5){
            if(cronAge[1]<=5){
                appTable = self.age5_5
            }else{
                appTable = self.age5_11
            }
        }else if(cronAge[2]==6){
            if(cronAge[1]<=5){
                appTable = self.age6_5
            }else{
                appTable = self.age6_11
            }
        }else if(cronAge[2]==7){
            if(cronAge[1]<=5){
                appTable = self.age7_5
            }else{
                appTable = self.age7_11
            }
        }else if(cronAge[2]==8){
            if(cronAge[1]<=5){
                appTable = self.age8_5
            }else{
                appTable = self.age8_11
            }
        }else if(cronAge[2]==9){
            if(cronAge[1]<=5){
                appTable = self.age9_5
            }else{
                appTable = self.age9_11
            }
        }else if(cronAge[2]==10){
            appTable = self.age10_11
        }else if(cronAge[2]==11){
            appTable = self.age11_11
        }else if(cronAge[2]==12){
            appTable = self.age12_11
        }else if(cronAge[2]==13){
            appTable = self.age13_11
        }else if(cronAge[2]==14){
            appTable = self.age14_11
        }else if(cronAge[2]==15){
            appTable = self.age15_11
        }else{
            return scaledScore
        }
        
        scaledScore[0] = Double(appTable[rawScore[0]-1][0])
        scaledScore[1] = Double(appTable[rawScore[1]-1][1])
        scaledScore[2] = Double(appTable[rawScore[2]-1][2])
        scaledScore[3] = Double(appTable[rawScore[3]-1][3])
        scaledScore[4] = Double(appTable[rawScore[4]-1][4])
        scaledScore[5] = Double(appTable[rawScore[5]-1][5])
        scaledScore[6] = Double(appTable[rawScore[6]-1][6])
        
        return scaledScore
    }
    
}
